# Copyright (C) 2020-2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

ARG OPENVINO_FORK="openvinotoolkit"
ARG OPENVINO_BRANCH=2022.2.0
ARG TENSORFLOW_AARCH64_BRANCH=2.8.4
ARG OMZ_BRANCH
ARG PYTHON_VERSION=3.8

FROM ratsputin/jetson-orin-nx-xavier-nx-devkit-ubuntu:focal-build AS base

ARG PYTHON_VERSION

# Set up proper Python version using Ubuntu update-alternatives.  Default auto is Python 3.8.
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 20 \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 10 \
    && update-alternatives --set python3 /usr/bin/python${PYTHON_VERSION}

LABEL description="This is the dev image for Intel(R) Distribution of OpenVINO(TM) toolkit on Ubuntu 20.04 LTS"
LABEL vendor="Intel Corporation"

# hadolint ignore=DL3008
RUN apt-get update; \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install -y --no-install-recommends \
        apt-utils \
        git \
        git-lfs \
        ca-certificates \
        sudo \
        pocl-opencl-icd \
        clinfo \
        tzdata; \
    rm -rf /var/lib/apt/lists/*

WORKDIR /tmp
RUN wget https://bootstrap.pypa.io/get-pip.py; \
    python3 get-pip.py

ARG OPENVINO_FORK
ARG OPENVINO_BRANCH
ARG OMZ_BRANCH

# hadolint ignore=DL3003
WORKDIR /opt/intel/repo/openvino
RUN git-lfs install; \
    git clone https://github.com/${OPENVINO_FORK}/openvino.git \
    --recurse-submodules --shallow-submodules --depth 1 -b ${OPENVINO_BRANCH} /opt/intel/repo/openvino; \
    if [ -n "$OMZ_BRANCH" ]; then  \
      cd /opt/intel/repo/openvino/thirdparty/open_model_zoo && \
      git remote set-branches origin '*' && \
      git fetch --depth 1 origin "$OMZ_BRANCH" && \
      git checkout "$OMZ_BRANCH"; \
    fi

FROM base AS openvino-preliminary

ARG INSTALL_NEO_OCL_DRIVERS="no"

WORKDIR /opt/intel/repo/openvino
RUN chmod +x install_build_dependencies.sh; \
    ./install_build_dependencies.sh

RUN if [ "INSTALL_NEO_OCL_DRIVERS" = "yes" ]; then \
      chmod +x scripts/install_dependencies/install_NEO_OCL_driver.sh; \
      ./scripts/install_dependencies/install_NEO_OCL_driver.sh -y --no_numa; \
    fi

# hadolint ignore=DL3013
RUN chmod +x scripts/install_dependencies/install_openvino_dependencies.sh; \
    ./scripts/install_dependencies/install_openvino_dependencies.sh -y -c=python; \
    pip3 install --no-cache-dir --upgrade pip; \
    pip3 install --no-cache-dir -r ./src/bindings/python/src/compatibility/openvino/requirements-dev.txt

WORKDIR /opt/intel/repo
CMD ["/bin/bash"]
# -------------------------------------------------------------------------------------------------
FROM openvino-preliminary AS build_openvino

ARG PYTHON_VERSION

LABEL description="This is the dev image for Intel(R) Distribution of OpenVINO(TM) toolkit on Ubuntu 20.04 LTS"
LABEL vendor="Intel Corporation"

COPY jetson-frigate/openvino_cmake.txt /opt/intel/repo

RUN pip3 install --no-cache-dir pytest==7.3.1; \
    pip3 install --no-cache-dir -r /opt/intel/repo/openvino/src/bindings/python/wheel/requirements-dev.txt

RUN apt-get update; \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install -y --no-install-recommends \
        libaec-dev \
        libtool \
        python${PYTHON_VERSION}-dev \
        unzip
# Install HWLOC for OneTBB support
WORKDIR /tmp
RUN wget https://download.open-mpi.org/release/hwloc/v2.9/hwloc-2.9.1.tar.gz; \
    tar xvzf hwloc-2.9.1.tar.gz; \
    cd hwloc-2.9.1; \
    ./configure; \
    make "-j$(nproc)"; \
    make install; \
    cd /tmp && rm -Rf hwloc-2.9.1

# Install OneTBB from sources as required
WORKDIR /tmp
RUN git clone https://github.com/oneapi-src/oneTBB.git; \
    cd oneTBB; \
    mkdir build && cd build; \
    cmake -DTBB_TEST=OFF ..; \
    cmake --build .; \
    cmake --install .; \
    cd /tmp && rm -Rf oneTBB

WORKDIR /opt/intel/repo/openvino/build
# hadolint ignore=SC2046
RUN sed -i "s/_platform_tags/platform_tags/g" ../src/bindings/python/wheel/CMakeLists.txt; \
    cmake $(cat /opt/intel/repo/openvino_cmake.txt) /opt/intel/repo/openvino; \
    make "-j$(nproc)"; \
    make install

WORKDIR /tmp
RUN curl -L https://github.com/libusb/libusb/archive/v1.0.22.zip --output v1.0.22.zip; \
    unzip v1.0.22.zip; \
    rm -f v1.0.22.zip; \
    cd libusb-1.0.22; \
    ./bootstrap.sh; \
    ./configure --disable-udev --enable-shared; \
    make "-j$(nproc)"

# -------------------------------------------------------------------------------------------------
FROM build_openvino AS build_openvino_phase2

ARG OPENVINO_BRANCH

RUN apt-get update; \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install -y --no-install-recommends \
        unzip \
        libaec-dev \
        libblosc-dev \
        libbrotli-dev \
        libdeflate-dev \
        libgif-dev \
        libopenjp2-7-dev \
        libjxr-dev \
        liblz4-dev \
        libcfitsio-dev \
        libsnappy-dev \
        libwebp-dev \
        libzopfli-dev \
        libzstd-dev; \
    rm -rf /var/lib/apt/lists/*

#
# Install supporting libraries
#
WORKDIR /tmp
RUN git clone --depth=1 https://github.com/google/brunsli.git; \
    cd brunsli; \
    git submodule update --init --recursive; \
    cmake -DCMAKE_BUILD_TYPE=Release -B out; \
    cmake --build out --config Release; \
    cmake --install out; \
    cd /tmp; \
    rm -Rf brunsli

WORKDIR /tmp
RUN git clone --depth=1 https://github.com/team-charls/charls.git; \
    cd charls; \
    mkdir release; \
    cd release; \
    cmake -DCMAKE_BUILD_TYPE=Release ..; \
    cmake --build .; \
    cmake --install .; \
    cd /tmp; \
    rm -Rf charls

# need v0.7 due to some deprecated #DEFINES being removed in v0.8
WORKDIR /tmp
RUN git clone https://github.com/libjxl/libjxl.git -b "v0.7.x" --recursive --depth=1 --shallow-submodules; \
    cd libjxl; \
    mkdir build; \
    cd build; \
    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF ..; \
    cmake --build . -- -j$(nproc); \
    cmake --install .; \
    cd /tmp; \
    rm -Rf libjxl

WORKDIR /tmp
RUN git clone https://github.com/LLNL/zfp.git; \
    cd zfp; \
    mkdir build; \
    cd build; \
    cmake ..; \
    cmake --build . --config Release; \
    cmake --install .; \
    ln -s /usr/local/include/zfp/bitstream.h /usr/local/include/bitstream.h; \
    cd /tmp; \
    rm -Rf zfp

#
# Build the wheels needed for openvino_dev on the aarch64 platform for tne next step
#
WORKDIR /opt/intel/repo/openvino/build/install
RUN pip3 wheel --no-cache-dir --wheel-dir=tools/ "openvino_dev[caffe,kaldi,onnx,pytorch]==$OPENVINO_BRANCH" --find-links=tools/

WORKDIR /opt/intel/repo
CMD ["/bin/bash"]
# -------------------------------------------------------------------------------------------------
FROM ratsputin/jetson-orin-nx-xavier-nx-devkit-ubuntu:focal-build AS openvino_binaries

ARG PYTHON_VERSION

# Set up proper Python version using Ubuntu update-alternatives.  Default auto is Python 3.8.
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 20 \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 10 \
    && update-alternatives --set python3 /usr/bin/python${PYTHON_VERSION}

LABEL description="This is the dev image for Intel(R) Distribution of OpenVINO(TM) toolkit on Ubuntu 20.04 LTS"
LABEL vendor="Intel Corporation"

ENV INTEL_OPENVINO_DIR="/opt/intel/openvino"

COPY --from=build_openvino_phase2 /opt/intel/repo/openvino/build/install ${INTEL_OPENVINO_DIR}
COPY --from=build_openvino_phase2 /tmp/libusb-1.0.22 /opt/libusb-1.0.22

WORKDIR /tmp
RUN wget https://bootstrap.pypa.io/get-pip.py; \
    python3 get-pip.py

WORKDIR ${INTEL_OPENVINO_DIR}
CMD ["/bin/bash"]
# -------------------------------------------------------------------------------------------------
FROM openvino_binaries AS openvino_python

ARG OPENVINO_BRANCH
ARG TENSORFLOW_AARCH64_BRANCH
ARG PYTHON_VERSION

LABEL description="This is the dev image for Intel(R) Distribution of OpenVINO(TM) toolkit on Ubuntu 20.04 LTS"
LABEL vendor="Intel Corporation"

# hadolint ignore=DL3008
RUN apt-get update; \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install -y --no-install-recommends \
        apt-utils \
        wget \
        udev \
        sudo \
        gdb \
        unzip \
        libpugixml1v5 \
        tzdata; \
    rm -rf /var/lib/apt/lists/*

ARG INSTALL_NEO_OCL_DRIVERS="no"

WORKDIR ${INTEL_OPENVINO_DIR}
RUN chmod +x install_dependencies/install_openvino_dependencies.sh; \
    ./install_dependencies/install_openvino_dependencies.sh -y -c=python -c=dev

RUN if [ "INSTALL_NEO_OCL_DRIVERS" = "yes" ]; then \
      chmod +x install_dependencies/install_NEO_OCL_driver.sh; \
      ./install_dependencies/install_NEO_OCL_driver.sh -y --no_numa; \
    fi

WORKDIR /opt/libusb-1.0.22
RUN ./libtool --mode=install install -c libusb/libusb-1.0.la /usr/local/lib/; \
    mkdir -p /usr/local/include/libusb-1.0; \
    install -c -m 644 libusb/libusb.h /usr/local/include/libusb-1.0; \
    mkdir -p /usr/local/lib/pkgconfig; \
    install -c -m 644 libusb-1.0.pc /usr/local/lib/pkgconfig

# Some releases don't have the NCS installer

WORKDIR ${INTEL_OPENVINO_DIR}
RUN if [ -f install_dependencies/install_NCS_udev_rules.sh ]; then \
        chmod +x install_dependencies/install_NCS_udev_rules.sh; \
        ./install_dependencies/install_NCS_udev_rules.sh; \
    fi

# hadolint ignore=DL3013
RUN pip3 install --no-cache-dir --upgrade pip; \
    pip3 install --no-cache-dir protobuf; \
    pip3 install --no-cache-dir -r python/python${PYTHON_VERSION}/requirements.txt; \
    pip3 install --no-cache-dir openvino --find-links=tools/ ; \
    pip3 install --no-cache-dir "tensorflow-aarch64==$TENSORFLOW_AARCH64_BRANCH" ; \
    pip3 install --no-cache-dir mxnet ; \
    pip3 install --no-cache-dir "openvino_dev[caffe,kaldi,onnx,pytorch]==$OPENVINO_BRANCH" --find-links=tools/
#   pip install --no-cache-dir 'openvino_dev[caffe,kaldi,mxnet,onnx,pytorch,tensorflow2]' --find-links=tools/

RUN printf "\nsource \${INTEL_OPENVINO_DIR}/setupvars.sh\n" >> /root/.bashrc

CMD ["/bin/bash"]
