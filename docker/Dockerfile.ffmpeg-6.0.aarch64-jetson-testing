# ffmpeg- http://ffmpeg.org/download.html
#
# From: https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
# From: https://hub.docker.com/r/jrottenberg/ffmpeg/
#
#

ARG     FFMPEG_VERSION=6.0
ARG	PREFIX=/opt/ffmpeg
ARG     PKG_CONFIG_PATH="/opt/ffmpeg/share/pkgconfig:/opt/ffmpeg/lib/pkgconfig:/opt/ffmpeg/lib64/pkgconfig:/opt/ffmpeg/lib/aarch64-linux-gnu/pkgconfig"
ARG     LD_LIBRARY_PATH="/usr/local/cuda-11.4/lib64:/opt/ffmpeg/lib:/opt/ffmpeg/lib64"

FROM        ratsputin/jetson-orin-nx-xavier-nx-devkit-ubuntu:focal-build AS base
FROM        ratsputin/jetson-orin-nx-xavier-nx-devkit-ubuntu:focal-run AS run

WORKDIR     /tmp/workdir

ENV     DEBIAN_FRONTEND=noninteractive
RUN     apt-get -yqq update && \
        apt-get install -yq --no-install-recommends \
        ca-certificates \
        expat \
        libgomp1 && \
        apt-get autoremove -y && \
        apt-get clean -y

FROM base as build

ARG FFMPEG_VERSION
ARG PREFIX

ENV FFMPEG_VERSION=${FFMPEG_VERSION} \
    AOM_VERSION=v1.0.0 \
    CHROMAPRINT_VERSION=1.5.0 \
    FDKAAC_VERSION=0.1.5 \
    FONTCONFIG_VERSION=2.12.4 \
    FREETYPE_VERSION=2.10.4 \
    FRIBIDI_VERSION=0.19.7 \
    KVAZAAR_VERSION=2.0.0 \
    LAME_VERSION=3.100 \
    LIBASS_VERSION=0.13.7 \
    LIBPTHREAD_STUBS_VERSION=0.4 \
    LIBVIDSTAB_VERSION=1.1.0 \
    LIBXCB_VERSION=1.13.1 \
    XCBPROTO_VERSION=1.13 \
    OGG_VERSION=1.3.2 \
    OPENCOREAMR_VERSION=0.1.5 \
    OPUS_VERSION=1.2 \
    OPENJPEG_VERSION=2.1.2 \
    THEORA_VERSION=1.1.1 \
    VORBIS_VERSION=1.3.5 \
    VPX_VERSION=1.8.0 \
    WEBP_VERSION=1.0.2 \
    X264_VERSION=20170226-2245-stable \
    X265_VERSION=3.1.1 \
    XAU_VERSION=1.0.9 \
    XORG_MACROS_VERSION=1.19.2 \
    XPROTO_VERSION=7.0.31 \
    XVID_VERSION=1.3.4 \
    LIBXML2_VERSION=2.9.12 \
    LIBBLURAY_VERSION=1.1.2 \
    LIBZMQ_VERSION=4.3.2 \
    LIBSRT_VERSION=1.4.1 \
    LIBARIBB24_VERSION=1.0.3 \
    LIBPNG_VERSION=1.6.9 \
    LIBVMAF_VERSION=2.1.1 \
    AVISYNTHPLUS_VERSION=3.7.2 \
    FREI0R_VERSION=2.3.0 \
    LV2_VERSION=1.18.10 \
    SERD_VERSION=0.30.16 \
    SORD_VERSION=0.16.14 \
    SRATOM_VERSION=0.6.14 \
    LILV_VERSION=0.24.20 \
    DAV1D_VERSION=1.2.1 \
    DAVS2_VERSION=1.7 \
    LIBDRM_VERSION=2.4.21 \
    LIBHWY_VERSION=1.0.4 \
    BROTLI_VERSION=1.0.9 \
    LIBJXL_VERSION=0.8.2 \
    OPENH264_VERSION=2.3.1 \
    MPG123_VERSION=1.31.3 \
    LIBSNDFILE_VERSION=1.2.0 \
    TDB_VERSION=1.4.8 \
    CHECK_VERSION=0.15.2 \
    PULSEAUDIO_VERSION=16.1 \
    PORTAUDIO_VERSION=19.7.0 \
    LIBFLAC_VERSION=1.4.3 \
    LIBOPENMPT_VERSION=0.7.2 \
    LIBPLACEBO_VERSION=5.264.1 \
    RAV1E_VERSION=0.6.6 \
    LIBRIST_VERSION=0.2.7 \
    RUBBERBAND_VERSION=3.2.1 \
    SHADERC_VERSION=2023.3 \
    SRC=/usr/local

ARG         FREETYPE_SHA256SUM="5eab795ebb23ac77001cfb68b7d4d50b5d6c7469247b0b01b2c953269f658dac freetype-2.10.4.tar.gz"
ARG         FRIBIDI_SHA256SUM="3fc96fa9473bd31dcb5500bdf1aa78b337ba13eb8c301e7c28923fea982453a8 0.19.7.tar.gz"
ARG         LIBASS_SHA256SUM="8fadf294bf701300d4605e6f1d92929304187fca4b8d8a47889315526adbafd7 0.13.7.tar.gz"
ARG         LIBVIDSTAB_SHA256SUM="14d2a053e56edad4f397be0cb3ef8eb1ec3150404ce99a426c4eb641861dc0bb v1.1.0.tar.gz"
ARG         OGG_SHA256SUM="e19ee34711d7af328cb26287f4137e70630e7261b17cbe3cd41011d73a654692 libogg-1.3.2.tar.gz"
ARG         OPUS_SHA256SUM="77db45a87b51578fbc49555ef1b10926179861d854eb2613207dc79d9ec0a9a9 opus-1.2.tar.gz"
ARG         THEORA_SHA256SUM="40952956c47811928d1e7922cda3bc1f427eb75680c3c37249c91e949054916b libtheora-1.1.1.tar.gz"
ARG         VORBIS_SHA256SUM="6efbcecdd3e5dfbf090341b485da9d176eb250d893e3eb378c428a2db38301ce libvorbis-1.3.5.tar.gz"
ARG         XVID_SHA256SUM="4e9fd62728885855bc5007fe1be58df42e5e274497591fec37249e1052ae316f xvidcore-1.3.4.tar.gz"
ARG         LIBBLURAY_SHA256SUM="a3dd452239b100dc9da0d01b30e1692693e2a332a7d29917bf84bb10ea7c0b42 libbluray-1.1.2.tar.bz2"
ARG         LIBZMQ_SHA256SUM="02ecc88466ae38cf2c8d79f09cfd2675ba299a439680b64ade733e26a349edeb v4.3.2.tar.gz"
ARG         LIBARIBB24_SHA256SUM="f61560738926e57f9173510389634d8c06cabedfa857db4b28fb7704707ff128 v1.0.3.tar.gz"


ARG         MAKEFLAGS="-j2"
ARG         PKG_CONFIG_PATH
ARG         LD_LIBRARY_PATH


ARG DEBIAN_FRONTEND=noninteractive

RUN      buildDeps="autoconf \
                    autogen \
                    automake \
                    bison \
                    bzip2 \
                    curl \
                    doxygen \
                    flex \
                    g++ \
                    gcc \
                    gettext \
                    git \
                    gperf \
                    graphviz \
                    libssl-dev \
                    libexpat1-dev \
                    libtool \
                    libwayland-dev \
                    libx11-xcb-dev \
                    libxkbcommon-dev \
                    libxml-parser-perl \
                    libxrandr-dev \
                    libxtst-dev \
                    make \
                    nasm \
                    pandoc \
                    perl \
                    pkg-config \
                    python \
                    python3-dev \
                    texinfo \
                    wget \
                    yasm \
                    zlib1g-dev" && \
        apt-get -yqq update && \
        apt-get install -yq --no-install-recommends ${buildDeps}

## cmake
RUN \
        DIR=/tmp/cmake && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/Kitware/CMake/releases/download/v3.27.0-rc4/cmake-3.27.0-rc4-linux-aarch64.sh && \
        chmod +x ./cmake-3.27.0-rc4-linux-aarch64.sh && \
        ./cmake-3.27.0-rc4-linux-aarch64.sh --skip-license --prefix=/usr/local && \
        rm -rf ${DIR}

## pip3
RUN \
        DIR=/tmp/pip3 && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        wget https://bootstrap.pypa.io/get-pip.py && \
        python3 get-pip.py && \
        rm -rf ${DIR}

## meson, ninja
RUN \
        pip3 install meson ninja

## rust
RUN \
	DIR=/tmp/rust && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
	curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- -y && \
	source $HOME/.cargo/env && \
	rm -rf ${DIR}

## libvmaf https://github.com/Netflix/vmaf
RUN \
        if which meson || false; then \
        echo "Building VMAF." && \
        DIR=/tmp/vmaf && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/Netflix/vmaf/archive/v${LIBVMAF_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${LIBVMAF_VERSION}.tar.gz && \
        cd /tmp/vmaf/libvmaf && \
        meson build --buildtype release --prefix=${PREFIX} && \
        ninja -vC build -j $(nproc) && \
        ninja -vC build install && \
        mkdir -p ${PREFIX}/share/model/ && \
        cp -r /tmp/vmaf/model/* ${PREFIX}/share/model/ && \
        rm -rf ${DIR} && \
        cp -r ${PREFIX}/lib/aarch64-linux-gnu/libvmaf.so* /usr/local/lib/ && \
        cp -r ${PREFIX}/include/libvmaf /usr/local/include/; \
        else \
        echo "VMAF skipped."; \
        fi

## opencore-amr https://sourceforge.net/projects/opencore-amr/
RUN \
        DIR=/tmp/opencore-amr && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-${OPENCOREAMR_VERSION}.tar.gz/download | \
        tar -zx --strip-components=1 && \
        ./configure --prefix="${PREFIX}" --enable-shared  && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
## x264 http://www.videolan.org/developers/x264.html
RUN \
        DIR=/tmp/x264 && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2 | \
        tar -jx --strip-components=1 && \
        ./configure --prefix="${PREFIX}" --enable-shared --enable-pic --disable-cli && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### x265 http://x265.org/
RUN \
        DIR=/tmp/x265 && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://download.videolan.org/pub/videolan/x265/x265_${X265_VERSION}.tar.gz  | \
        tar -zx && \
        cd x265_${X265_VERSION}/build/linux && \
        sed -i "/-DEXTRA_LIB/ s/$/ -DCMAKE_INSTALL_PREFIX=\${PREFIX}/" multilib.sh && \
        sed -i "/^cmake/ s/$/ -DENABLE_CLI=OFF/" multilib.sh && \
        export CXXFLAGS="${CXXFLAGS} -fPIC" && \
        ./multilib.sh && \
        make -C 8bit install && \
        rm -rf ${DIR}
### libogg https://www.xiph.org/ogg/
RUN \
        DIR=/tmp/ogg && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO http://downloads.xiph.org/releases/ogg/libogg-${OGG_VERSION}.tar.gz && \
        echo ${OGG_SHA256SUM} | sha256sum --check && \
        tar -zx --strip-components=1 -f libogg-${OGG_VERSION}.tar.gz && \
        ./configure --prefix="${PREFIX}" --enable-shared  && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### libopus https://www.opus-codec.org/
RUN \
        DIR=/tmp/opus && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://archive.mozilla.org/pub/opus/opus-${OPUS_VERSION}.tar.gz && \
        echo ${OPUS_SHA256SUM} | sha256sum --check && \
        tar -zx --strip-components=1 -f opus-${OPUS_VERSION}.tar.gz && \
        autoreconf -fiv && \
        ./configure --prefix="${PREFIX}" --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### libvorbis https://xiph.org/vorbis/
RUN \
        DIR=/tmp/vorbis && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO http://downloads.xiph.org/releases/vorbis/libvorbis-${VORBIS_VERSION}.tar.gz && \
        echo ${VORBIS_SHA256SUM} | sha256sum --check && \
        tar -zx --strip-components=1 -f libvorbis-${VORBIS_VERSION}.tar.gz && \
        ./configure --prefix="${PREFIX}" --with-ogg="${PREFIX}" --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### libtheora http://www.theora.org/
RUN \
        DIR=/tmp/theora && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO http://downloads.xiph.org/releases/theora/libtheora-${THEORA_VERSION}.tar.gz && \
        echo ${THEORA_SHA256SUM} | sha256sum --check && \
        tar -zx --strip-components=1 -f libtheora-${THEORA_VERSION}.tar.gz && \
        sed -i 's/png_\(sizeof\)/\1/g' examples/png2theora.c && \
        ./configure --prefix="${PREFIX}" --with-ogg="${PREFIX}" --build=arm --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### libvpx https://www.webmproject.org/code/
RUN \
        DIR=/tmp/vpx && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://codeload.github.com/webmproject/libvpx/tar.gz/v${VPX_VERSION} | \
        tar -zx --strip-components=1 && \
        ./configure --prefix="${PREFIX}" --enable-vp8 --enable-vp9 --enable-vp9-highbitdepth --enable-pic --enable-shared \
        --disable-debug --disable-examples --disable-docs --disable-install-bins  && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### libwebp https://developers.google.com/speed/webp/
RUN \
        DIR=/tmp/vebp && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${WEBP_VERSION}.tar.gz | \
        tar -zx --strip-components=1 && \
        ./configure --prefix="${PREFIX}" --enable-shared  && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### libmp3lame http://lame.sourceforge.net/
RUN \
        DIR=/tmp/lame && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://sourceforge.net/projects/lame/files/lame/${LAME_VERSION}/lame-${LAME_VERSION}.tar.gz/download | \
        tar -zx --strip-components=1 && \
        ./configure --prefix="${PREFIX}" --bindir="${PREFIX}/bin" --enable-shared --enable-nasm --disable-frontend && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### xvid https://www.xvid.com/
RUN \
        DIR=/tmp/xvid && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO http://downloads.xvid.org/downloads/xvidcore-${XVID_VERSION}.tar.gz && \
        echo ${XVID_SHA256SUM} | sha256sum --check && \
        tar -zx -f xvidcore-${XVID_VERSION}.tar.gz && \
        cd xvidcore/build/generic && \
        ./configure --prefix="${PREFIX}" --bindir="${PREFIX}/bin" && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
### fdk-aac https://github.com/mstorsjo/fdk-aac
RUN \
        DIR=/tmp/fdk-aac && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://github.com/mstorsjo/fdk-aac/archive/v${FDKAAC_VERSION}.tar.gz | \
        tar -zx --strip-components=1 && \
        autoreconf -fiv && \
        ./configure --prefix="${PREFIX}" --enable-shared --datadir="${DIR}" && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
## openjpeg https://github.com/uclouvain/openjpeg
RUN \
        DIR=/tmp/openjpeg && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz | \
        tar -zx --strip-components=1 && \
        export CFLAGS="${CFLAGS} -DPNG_ARM_NEON_OPT=0" && \
        cmake -DBUILD_THIRDPARTY:BOOL=ON -DCMAKE_INSTALL_PREFIX="${PREFIX}" . && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
## freetype https://www.freetype.org/
RUN  \
        DIR=/tmp/freetype && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://download.savannah.gnu.org/releases/freetype/freetype-${FREETYPE_VERSION}.tar.gz && \
        echo ${FREETYPE_SHA256SUM} | sha256sum --check && \
        tar -zx --strip-components=1 -f freetype-${FREETYPE_VERSION}.tar.gz && \
        ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
## libvstab https://github.com/georgmartius/vid.stab
RUN  \
        DIR=/tmp/vid.stab && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/georgmartius/vid.stab/archive/v${LIBVIDSTAB_VERSION}.tar.gz && \
        echo ${LIBVIDSTAB_SHA256SUM} | sha256sum --check &&  \
        tar -zx --strip-components=1 -f v${LIBVIDSTAB_VERSION}.tar.gz && \
        cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" . && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
## fridibi https://www.fribidi.org/
RUN  \
        DIR=/tmp/fribidi && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/fribidi/fribidi/archive/${FRIBIDI_VERSION}.tar.gz && \
        echo ${FRIBIDI_SHA256SUM} | sha256sum --check && \
        tar -zx --strip-components=1 -f ${FRIBIDI_VERSION}.tar.gz && \
        sed -i 's/^SUBDIRS =.*/SUBDIRS=gen.tab charset lib bin/' Makefile.am && \
        ./bootstrap --no-config --auto && \
        ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
        make -j1 && \
        make install && \
        rm -rf ${DIR}
## fontconfig https://www.freedesktop.org/wiki/Software/fontconfig/
RUN  \
        DIR=/tmp/fontconfig && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://www.freedesktop.org/software/fontconfig/release/fontconfig-${FONTCONFIG_VERSION}.tar.bz2 && \
        tar -jx --strip-components=1 -f fontconfig-${FONTCONFIG_VERSION}.tar.bz2 && \
        ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
## libass https://github.com/libass/libass
RUN  \
        DIR=/tmp/libass && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/libass/libass/archive/${LIBASS_VERSION}.tar.gz && \
        echo ${LIBASS_SHA256SUM} | sha256sum --check && \
        tar -zx --strip-components=1 -f ${LIBASS_VERSION}.tar.gz && \
        ./autogen.sh && \
        ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}
## kvazaar https://github.com/ultravideo/kvazaar
RUN \
        DIR=/tmp/kvazaar && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/ultravideo/kvazaar/archive/v${KVAZAAR_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f v${KVAZAAR_VERSION}.tar.gz && \
        ./autogen.sh && \
        ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## aom
RUN \
        DIR=/tmp/aom && \
        git clone --branch ${AOM_VERSION} --depth 1 https://aomedia.googlesource.com/aom ${DIR} && \
        cd ${DIR} && \
        rm -rf CMakeCache.txt CMakeFiles && \
        mkdir -p ./aom_build && \
        cd ./aom_build && \
        cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" -DBUILD_SHARED_LIBS=1 .. && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libxcb (and supporting libraries) for screen capture https://xcb.freedesktop.org/
RUN \
        DIR=/tmp/xorg-macros && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://www.x.org/archive//individual/util/util-macros-${XORG_MACROS_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f util-macros-${XORG_MACROS_VERSION}.tar.gz && \
        ./configure --srcdir=${DIR} --prefix="${PREFIX}" && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## xproto
RUN \
        DIR=/tmp/xproto && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://www.x.org/archive/individual/proto/xproto-${XPROTO_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f xproto-${XPROTO_VERSION}.tar.gz && \
        curl -sL 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -o config.guess && \
        curl -sL 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' -o config.sub && \
        ./configure --srcdir=${DIR} --prefix="${PREFIX}" && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libXau
RUN \
        DIR=/tmp/libXau && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://www.x.org/archive/individual/lib/libXau-${XAU_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f libXau-${XAU_VERSION}.tar.gz && \
        ./configure --srcdir=${DIR} --prefix="${PREFIX}" && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libpthread
RUN \
        DIR=/tmp/libpthread-stubs && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://xcb.freedesktop.org/dist/libpthread-stubs-${LIBPTHREAD_STUBS_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f libpthread-stubs-${LIBPTHREAD_STUBS_VERSION}.tar.gz && \
        ./configure --prefix="${PREFIX}" && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libxcb-proto
RUN \
        DIR=/tmp/libxcb-proto && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://xcb.freedesktop.org/dist/xcb-proto-${XCBPROTO_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f xcb-proto-${XCBPROTO_VERSION}.tar.gz && \
        ACLOCAL_PATH="${PREFIX}/share/aclocal" ./autogen.sh && \
        ./configure --prefix="${PREFIX}" && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libxcb
RUN \
        DIR=/tmp/libxcb && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://xcb.freedesktop.org/dist/libxcb-${LIBXCB_VERSION}.tar.gz && \
        tar -zx --strip-components=1 -f libxcb-${LIBXCB_VERSION}.tar.gz && \
        ACLOCAL_PATH="${PREFIX}/share/aclocal" ./autogen.sh && \
        ./configure --prefix="${PREFIX}" --disable-static --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libxml2 - for libbluray
RUN \
        DIR=/tmp/libxml2 && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sL https://github.com/GNOME/libxml2/archive/refs/tags/v${LIBXML2_VERSION}.tar.gz | \
        tar -xz --strip-components=1 && \
        ./autogen.sh --prefix="${PREFIX}" --with-ftp=no --with-http=no --with-python=no && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libbluray - Requires libxml, freetype, and fontconfig
RUN \
        DIR=/tmp/libbluray && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://download.videolan.org/pub/videolan/libbluray/${LIBBLURAY_VERSION}/libbluray-${LIBBLURAY_VERSION}.tar.bz2 && \
        echo ${LIBBLURAY_SHA256SUM} | sha256sum --check && \
        tar -jx --strip-components=1 -f libbluray-${LIBBLURAY_VERSION}.tar.bz2 && \
        ./configure --prefix="${PREFIX}" --disable-examples --disable-bdjava-jar --disable-static --enable-shared && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libzmq https://github.com/zeromq/libzmq/
RUN \
        DIR=/tmp/libzmq && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/zeromq/libzmq/archive/v${LIBZMQ_VERSION}.tar.gz && \
        echo ${LIBZMQ_SHA256SUM} | sha256sum --check && \
        tar -xz --strip-components=1 -f v${LIBZMQ_VERSION}.tar.gz && \
        ./autogen.sh && \
        ./configure --prefix="${PREFIX}" && \
        make -j$(nproc) && \
        make check && \
        make install && \
        rm -rf ${DIR}

## libsrt https://github.com/Haivision/srt
RUN \
        DIR=/tmp/srt && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/Haivision/srt/archive/v${LIBSRT_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${LIBSRT_VERSION}.tar.gz && \
        cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" . && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## libpng
RUN \
        DIR=/tmp/png && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://git.code.sf.net/p/libpng/code ${DIR} -b v${LIBPNG_VERSION} --depth 1 && \
        ./autogen.sh && \
        ./configure --prefix="${PREFIX}" && \
        make check && \
        make install && \
        rm -rf ${DIR}

## libaribb24
RUN \
        DIR=/tmp/b24 && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/nkoriyama/aribb24/archive/v${LIBARIBB24_VERSION}.tar.gz && \
        echo ${LIBARIBB24_SHA256SUM} | sha256sum --check && \
        tar -xz --strip-components=1 -f v${LIBARIBB24_VERSION}.tar.gz && \
        autoreconf -fiv && \
        ./configure CFLAGS="-I${PREFIX}/include -fPIC" --prefix="${PREFIX}" && \
        make -j$(nproc) && \
        make install && \
        rm -rf ${DIR}

## jetson-ffmpeg https://github.com/Keylost/jetson-ffmpeg
RUN \
        DIR=/tmp/jetson-ffmpeg && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://github.com/Keylost/jetson-ffmpeg.git --depth 1 && \
        cd jetson-ffmpeg && \
        mkdir build && \
        cd build && \
        cmake .. && \
        make -j$(nproc) && \
        make install && \
        ldconfig && \
        rm -rf ${DIR}

## AviSynthPlus
RUN \
        DIR=/tmp/AviSynthPlus && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/AviSynth/AviSynthPlus/archive/refs/tags/v${AVISYNTHPLUS_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${AVISYNTHPLUS_VERSION}.tar.gz && \
        mkdir avisynth-build && cd avisynth-build &&\
        cmake ../ -DHEADERS_ONLY:bool=on -DCMAKE_INSTALL_PREFIX=${PREFIX} && \
        make VersionGen install && \
        rm -Rf ${DIR}

## frei0r
RUN \
        DIR=/tmp/frei0r && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/dyne/frei0r/archive/refs/tags/v${FREI0R_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${FREI0R_VERSION}.tar.gz && \
        mkdir -p build && \
        cd build && \
        cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" ../ && \
        make -j$(nproc) && \
        make install && \
        rm -Rf ${DIR}

## libgmp (requires bison, byacc, flex, texinfo)
RUN \
        DIR=/tmp/libgmp && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://github.com/sethtroisi/libgmp.git ${DIR} -b master --depth=1 && \
        ./.bootstrap && \ 
        ./configure --enable-maintainer-mode --prefix="${PREFIX}" && \
        make -j$(nproc) && \
        make check && \
        make install && \
        rm -Rf ${DIR}

## lv2
RUN \
        DIR=/tmp/lv2 && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/lv2/lv2/archive/refs/tags/v${LV2_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${LV2_VERSION}.tar.gz && \
        meson setup build && \
        cd build && \
        meson configure -Dprefix=${PREFIX} && \
        meson compile && \
        meson install && \
        rm -Rf ${DIR}

## serd-0
RUN \
        DIR=/tmp/serd && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/drobilla/serd/archive/refs/tags/v${SERD_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${SERD_VERSION}.tar.gz && \
        meson setup build && \
        cd build && \
        meson configure -Dprefix=${PREFIX} && \
        meson compile && \
        meson install && \
        rm -Rf ${DIR}

## sord-0
RUN \
        DIR=/tmp/sord && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/drobilla/sord/archive/refs/tags/v${SORD_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${SORD_VERSION}.tar.gz && \
        meson setup build && \
        cd build && \
        meson configure -Dprefix=${PREFIX} && \
        meson compile && \
        meson install && \
        rm -Rf ${DIR}

## sratom-0
RUN \
        DIR=/tmp/sratom && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/lv2/sratom/archive/refs/tags/v${SRATOM_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${SRATOM_VERSION}.tar.gz && \
        meson setup build && \
        cd build && \
        meson configure -Dprefix=${PREFIX} && \
        meson compile && \
        meson install && \
        rm -Rf ${DIR}

## lilv
RUN \
        DIR=/tmp/lilv && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/lv2/lilv/archive/refs/tags/v${LILV_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${LILV_VERSION}.tar.gz && \
        meson setup build && \
        cd build && \
        meson configure -Dprefix=${PREFIX} && \
        meson compile && \
        meson install && \
        rm -Rf ${DIR}

## dav1d
RUN \
        DIR=/tmp/dav1d && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://github.com/videolan/dav1d.git ${DIR} -b ${DAV1D_VERSION} --depth 1 && \
        mkdir build && \
        meson setup build -Dprefix=${PREFIX} && \
        cd build && \
        ninja -j $(nproc) && \
        ninja install && \
        rm -Rf ${DIR}

## libdrm
RUN \
	DIR=/tmp/libdrm && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
	curl -sLO https://github.com/nobled/libdrm/archive/refs/tags/${LIBDRM_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f ${LIBDRM_VERSION}.tar.gz && \
	autoreconf -i && \
        ./configure --prefix="${PREFIX}" && \
	sed -i '/#include <sys\/stat.h>/a #include <sys\/sysmacros.h>' libkms/linux.c && \
        make -j$(nproc) && \
	make install && \
	rm -Rf ${DIR}

## libgme
RUN \
	DIR=/tmp/libgme && \
	mkdir -p ${DIR} && \
	cd ${DIR} && \
	git clone https://github.com/mcfiredrill/libgme.git ${DIR} --depth 1 && \
	cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" . && \
	make -j$(nproc) && \
	make install && \
        rm -Rf ${DIR}

## libhwy
RUN \
	DIR=/tmp/libhwy && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/google/highway/archive/refs/tags/${LIBHWY_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f ${LIBHWY_VERSION}.tar.gz && \
	mkdir -p build && cd build && \
	cmake -DBUILD_SHARED_LIBS=true -DCMAKE_INSTALL_PREFIX="${PREFIX}" .. && \
	make -j$(nproc) && \
	make test && \
        rm -Rf ${DIR}

## brotli
RUN \
        DIR=/tmp/brotli && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/google/brotli/archive/refs/tags/v${BROTLI_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${BROTLI_VERSION}.tar.gz && \
	mkdir out && cd out && \
	cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${PREFIX}" .. && \
	cmake --build . --config Release --target install -j$(nproc) && \
        rm -Rf ${DIR}

## libjxl
RUN \
        DIR=/tmp/libjxl && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
	git clone --branch v${LIBJXL_VERSION} https://github.com/libjxl/libjxl.git ${DIR} --recursive --shallow-submodules -- && \
	mkdir build && \
	cd build && \
	cmake -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX="${PREFIX}" .. && \
	cmake --build . -- -j$(nproc) && \
	cmake --install . && \
	rm -Rf ${DIR}

## openh264
RUN \
	DIR=/tmp/openh264 && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/cisco/openh264/archive/refs/tags/v${OPENH264_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f v${OPENH264_VERSION}.tar.gz && \
	mkdir builddir && \
	meson builddir --prefix=${PREFIX} && \
	ninja -C builddir -j $(nproc) && \
	ninja -C builddir install && \
	rm -Rf ${DIR}

## mpg123
RUN \
	DIR=/tmp/mpg123 && \
	mkdir -p ${DIR} && \
	cd ${DIR} && \
	curl -sLO http://ftp.oregonstate.edu/.1/blfs/conglomeration/mpg123/mpg123-${MPG123_VERSION}.tar.bz2 && \
        tar -xj --strip-components=1 -f mpg123-${MPG123_VERSION}.tar.bz2 && \
	./configure --prefix="${PREFIX}" && \
	make -j$(nproc) && \
	make install && \
        rm -Rf ${DIR}

## libsndfile
RUN \
	DIR=/tmp/libsndfile && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
	curl -sLO https://github.com/libsndfile/libsndfile/archive/refs/tags/${LIBSNDFILE_VERSION}.tar.gz && \
	tar -xz --strip-components=1 -f ${LIBSNDFILE_VERSION}.tar.gz && \
	autoreconf -vif && \
	./configure --prefix="${PREFIX}" --enable-werror && \
	make -j$(nproc) && \
	make install && \
	rm -Rf ${DIR}

## Samba tdb
RUN \
	DIR=/tmp/tdb && \
	mkdir -p ${DIR} && \
	cd ${DIR} && \
	curl -sLO https://www.samba.org/ftp/tdb/tdb-${TDB_VERSION}.tar.gz && \
	tar -xz --strip-components=1 -f tdb-${TDB_VERSION}.tar.gz && \
	./configure --prefix="${PREFIX}" && \
	make -j$(nproc) && \
	make install && \
	rm -Rf ${DIR}

## check
RUN \
	DIR=/tmp/check && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/libcheck/check/archive/refs/tags/${CHECK_VERSION}.tar.gz && \ 
        tar -xz --strip-components=1 -f ${CHECK_VERSION}.tar.gz && \
	mkdir build && cd build && \
	cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" ../ && \
	make -j$(nproc) && \
	make install && \
        rm -Rf ${DIR}

## vulkan - https://developer.nvidia.com/embedded/vulkan
RUN \
        DIR=/tmp/Vulkan-Loader && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://github.com/KhronosGroup/Vulkan-Loader.git ${DIR} --depth 1 && \
        mkdir build && cd build && \
        python3 ../scripts/update_deps.py && \
        cmake -DCMAKE_BUILD_TYPE=Release -DVULKAN_HEADERS_INSTALL_DIR=$(pwd)/Vulkan-Headers/build/install -DCMAKE_INSTALL_PREFIX="${PREFIX}" .. && \
        make -j $(nproc) && \
        make install && \
        cd Vulkan-Headers/ && \
        cmake -S . -B build / && \
        cmake --install build --prefix "${PREFIX}" && \
        rm -Rf ${DIR}

## pulseaudio (libpulse)
RUN \
	DIR=/tmp/pulseaudio && \
	mkdir -p ${DIR} && \
	cd ${DIR} && \
	git clone https://gitlab.freedesktop.org/pulseaudio/pulseaudio.git ${DIR} -b v${PULSEAUDIO_VERSION} --depth 1 && \
	meson --prefix="${PREFIX}" build && \
	ninja -C build -j $(nproc) && \
	ninja -C build install && \
	rm -Rf ${DIR}

## portaudio and portaudiocpp
RUN \
        DIR=/tmp/portaudio && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/PortAudio/portaudio/archive/refs/tags/v${PORTAUDIO_VERSION}.tar.gz && \ 
        tar -xz --strip-components=1 -f v${PORTAUDIO_VERSION}.tar.gz && \
	./configure --prefix="${PREFIX}" && \
	make -j$(nproc) && \
	make install && \
	cd ${DIR}/bindings/cpp && \
	./configure --prefix="${PREFIX}" && \
	make -j$(nproc) && \
	make install && \
        rm -Rf ${DIR}

## libflac
RUN \
        DIR=/tmp/libflac && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/xiph/flac/archive/refs/tags/${LIBFLAC_VERSION}.tar.gz && \
        tar -xz --strip-components=1 -f ${LIBFLAC_VERSION}.tar.gz && \
	cmake -DCMAKE_INSTALL_PREFIX="${PREFIX}" -DBUILD_SHARED_LIBS=ON -DINSTALL_MANPAGES=OFF . && \
	make -j$(nproc) && \
        head -n -4 doc/cmake_install.cmake > tmp.txt && \
        mv tmp.txt doc/cmake_install.cmake && \
	make install && \
        rm -Rf ${DIR}

## libopenmpt
RUN \
	DIR=/tmp/libopenmpt && \
	mkdir -p ${DIR} && \
	cd ${DIR} && \
	curl -sLO https://lib.openmpt.org/files/libopenmpt/src/libopenmpt-${LIBOPENMPT_VERSION}+release.autotools.tar.gz && \
	tar -xz --strip-components=1 -f libopenmpt-${LIBOPENMPT_VERSION}+release.autotools.tar.gz && \
	./configure --prefix="${PREFIX}" && \
	make -j$(nproc) && \
	make install && \
	rm -Rf ${DIR}

## libplacebo
RUN \
	DIR=/tmp/libplacebo && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://github.com/haasn/libplacebo.git ${DIR} --recursive --depth 1 && \
	meson --prefix="${PREFIX}" ./build && \
	ninja -C ./build -j $(nproc) && \
	ninja -C ./build install && \
	rm -Rf ${DIR}

## rav1e
RUN \
        DIR=/tmp/rav1e && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        curl -sLO https://github.com/xiph/rav1e/archive/refs/tags/v${RAV1E_VERSION}.tar.gz && \
	tar -xz --strip-components=1 -f v${RAV1E_VERSION}.tar.gz && \
	cargo build --release && \
#	cargo install --path . --root "${PREFIX}" && \
	cargo install cargo-c && \
	cargo cinstall --release --prefix="${PREFIX}" && \
        rm -Rf ${DIR}

## librist
RUN \
        DIR=/tmp/librist && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://code.videolan.org/rist/librist.git ${DIR} -b v${LIBRIST_VERSION} --depth=1 && \
	mkdir build && cd build && \
	meson -Dprefix=${PREFIX} .. && \
	ninja -j $(nproc) && \
	ninja install && \
	rm -Rf ${DIR}

## rubberband
RUN \
        DIR=/tmp/rubberband && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://github.com/breakfastquay/rubberband.git ${DIR} -b v${RUBBERBAND_VERSION} --depth=1 && \
	meson setup build -Dprefix=${PREFIX} -Dextra_lib_dirs=/opt/ffmpeg/lib/aarch64-linux-gnu/ -Dextra_include_dirs=/opt/ffmpeg/include && \
	ninja -C build -j $(nproc) && \
	ninja -C build install && \
	rm -Rf ${DIR}

## shaderc
RUN \
        DIR=/tmp/shaderc && \
        mkdir -p ${DIR} && \
        cd ${DIR} && \
        git clone https://github.com/google/shaderc.git ${DIR} -b v${SHADERC_VERSION} --depth=1 && \
	./utils/git-sync-deps && \
	mkdir build && cd build && \
	cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${PREFIX}" .. && \
	ninja -j $(nproc) && \
	ninja install && \
	rm -Rf ${DIR}

FROM 	build AS build-ffmpeg

ARG     FFMPEG_VERSION
ARG     PREFIX
ARG     PKG_CONFIG_PATH
ARG     LD_LIBRARY_PATH

ENV     CUDA_HOME /usr/local/cuda-11.4

## ffmpeg https://ffmpeg.org/
WORKDIR /tmp
RUN  \
        git clone git://source.ffmpeg.org/ffmpeg.git -b release/${FFMPEG_VERSION} --depth=1


## Patch ffmpeg with NVIDIA nvmpi support https://github.com/Keylost/jetson-ffmpeg 
WORKDIR /tmp/ffmpeg
RUN  \
        export PATH=/usr/local/cuda-11.4/bin${PATH:+:${PATH}} && \
        wget -O ffmpeg_nvmpi.patch https://github.com/Keylost/jetson-ffmpeg/raw/master/ffmpeg_patches/ffmpeg${FFMPEG_VERSION}_nvmpi.patch && \
        git apply ffmpeg_nvmpi.patch && \
        ./configure \
	--disable-debug \
        --disable-libfdk-aac \
        --disable-schannel \
        --enable-amf \
        --enable-avisynth \
        --enable-cuda-llvm \
        --enable-ffnvcodec \
        --enable-fontconfig \
        --enable-frei0r \
        --enable-gmp \
        --enable-gpl \
        --enable-iconv \
        --enable-libaom \
        --enable-libaribb24 \
        --enable-libass \
        --enable-libbluray \
        --enable-libdav1d \
        --enable-libdrm \
        --enable-libfreetype \
        --enable-libfribidi \
        --enable-libgme \
        --enable-libjxl \
        --enable-libmp3lame \
        --enable-libopencore-amrnb \
        --enable-libopencore-amrwb \
        --enable-libopenh264 \
        --enable-libopenjpeg \
        --enable-libopenmpt \
        --enable-libopus \
        --enable-libplacebo \
        --enable-libpulse \
        --enable-librav1e \
        --enable-librist \
        --enable-librubberband \
        --enable-libshaderc \
        --enable-libsoxr \
        --enable-libsrt \
        --enable-libsvtav1 \
        --enable-libtheora \
        --enable-libtwolame \
        --enable-libuavs3d \
        --enable-libvidstab \
        --enable-libvmaf \
        --enable-libvorbis \
        --enable-libvpx \
        --enable-libwebp \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libxavs2 \
        --enable-libxcb \
        --enable-libxml2 \
        --enable-libxvid \
        --enable-libzimg \
        --enable-libzvbi \
        --enable-lv2 \
        --enable-lzma \
        --enable-mbedtls \
        --enable-opencl \
        --enable-sdl2 \
        --enable-vaapi \
        --enable-version3 \
        --enable-vulkan \
        --enable-xlib \
        --enable-zlib \
        --extra-cflags=-DLIBTWOLAME_STATIC \
        --extra-cxxflags= \
        --extra-ldexeflags=-pie \
        --extra-ldflags=-pthread \
        --extra-libs='-ldl -lgomp' \
        --extra-version=20220731 \
        --pkg-config-flags=--static \
        --pkg-config=pkg-config \
        --extra-cflags="-I${PREFIX}/include" \
        --extra-ldflags="-L${PREFIX}/lib" \
        --prefix="${PREFIX}"

RUN \
        make clean && \
        make -j $(nproc) && \
        make install

RUN \
        make tools/zmqsend && cp tools/zmqsend ${PREFIX}/bin/ && \
        make distclean && \
        hash -r && \
        cd tools && \
        make qt-faststart && cp qt-faststart ${PREFIX}/bin/

## cleanup
RUN \
        ldd ${PREFIX}/bin/ffmpeg | grep opt/ffmpeg | cut -d ' ' -f 3 | xargs -i cp {} /usr/local/lib/ && \
        for lib in /usr/local/lib/*.so.*; do ln -s "${lib##*/}" "${lib%%.so.*}".so; done && \
        cp ${PREFIX}/bin/* /usr/local/bin/ && \
        cp -r ${PREFIX}/share/ffmpeg /usr/local/share/ && \
        cp -r ${PREFIX}/include/libav* ${PREFIX}/include/libpostproc ${PREFIX}/include/libsw* /usr/local/include && \
        mkdir -p /usr/local/lib/pkgconfig && \
        for pc in ${PREFIX}/lib/pkgconfig/libav*.pc ${PREFIX}/lib/pkgconfig/libpostproc.pc ${PREFIX}/lib/pkgconfig/libsw*.pc; do \
          sed "s:${PREFIX}:/usr/local:g" <"$pc" >/usr/local/lib/pkgconfig/"${pc##*/}"; \
        done

FROM        run AS release

ENV         LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64:/usr/local/lib:/usr/local/lib64

CMD         ["--help"]
ENTRYPOINT  ["ffmpeg"]

COPY --from=build-ffmpeg /usr/local /usr/local/

# Let's make sure the app built correctly
# Convenient to verify on https://hub.docker.com/r/jrottenberg/ffmpeg/builds/ console output

